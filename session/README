show.njs?name=session - показывает данные в сессии

ses=infra.Session.init(sesname,view);
ses.get(name);
ses.set(name,value);


Модуль предоставляет единый api к сессиям на клиенте и на сервере
				 клиент			| сервер      | постоянное хранилище
место хранения:  storage, var	| var, global | disk
							
Синхронизированной называется сессия устанавливаемые значения которой на клиенте передаются на сервер. При создании сессии и при любых коннектах с сервера забираются новые значения.
Время последней синхронизации хранится в кукисах вместе с id



Если сессия сохраняется на сервере физически при рестарте сервера данные потеряются. это относится к сессиям face easy temp

В локальном хранилище браузера данные хранятся по имени и им требуется сериализация, что означает дополнительную нагрузку и потери ссылочной связи сохраняемых данных, тоесть объект при сохранении будет копироваться.

id любой сессии не является тайной для пользователя, при этом знание постороннего человека этого id позволит получить доступ к сессии. В кукисах хранится id только синхронизируемых сессий data face. Для работы с сессией программисту не требуется знание id. id динамически присваивается если нет или используется уже существующей. У каждого типа сессии свой id. Все типы могут работать одновременно. Двух сессий одного типа одновременно обрабатываться не могут. Для этого есть отдельный административный api для сессий sesadm.
						


sesname YYMMDD-XXXXXX

Есть технология позволяющая контролировать на сервере все устанавливаемые значения в любую сесси. По умолчанию можно установить всё. 



При синхронизации берётся time последней синхронизации из кукисов.. на сервере по этому вермени идёт пробежка по всем данным в global переменной с помощью sesadm находятся те, что были созданы после указанного time и передаются клиенту, если данных для сесси не будет в переменных процесса node.. то будет проверка на диске, то есть для изменения сесси на сервере изменяется диск и серверные переменны. Браузеру данные уйдут при его следующем обращении. Сервер не сверяется с основным хранилищем - предполагается, что c диском работает только один процесс нода.. и только в случае отсутствия данных в переменной процесса сервер также считает данные с диска востановив переменные. Запись на диск осуществляется при любом set сессии, когда сессия впринципе пишется на диск.


Уникальность сессии для одного пользователя определяется имененем, а для многих пользователей ещё и id. При этом два пользователя могут работать с одной и тойже сессией с одним id и получать обновления друг друга.

На клиенте есть места 
1 где хранится информация о текущих сессиях - это всегда cookie
2 где хранится сессия это могут быть cookie localStorage приблудаIE
3 объекты класса Session который также в себе хранят собранные данные, с которыми идёт работа
Все вызовы set записываются в 2 и 3 место.

Если id меняется на клиенте это тоже самое что забыть старую сессию и попытаться сделать новую с новым id.


var session=infra.Session.init('base',view);

Переименовать id сессии нельзя

По умолчанию сессия не синхонизируется. 

Удалить сессию может только сервер. Клиент может начать пустую новую.

Сессия могла быть забыта на сервере и вот возвращается пользователь с сохранённой сессией в браузере.. в этом случае вся сессия браузера должна записатсья на сервер

1 браузер - localStorage
	2 сессия браузера

	3 сессия сервера
4 сервер - процесс

5 физ хранилище

Для того чтобы физхранилище перезаписалось можно удалить папку данных


=============================================
session не синхронизируется на клиенте что будет означать её вечную жизнь в локальном хранилище.
на сервере это будет означать её вечную жизнь в переменной.

session - 
=============================================
infra.Session(){//Класс работает в node и javascript
	name:string,
	option:{
		disk:bool,
		sync:bool,
		seri:bool	
	},
	getId:()
	//id:'YYMMDD-XXXXXX-KK', в данных не хранится id текущей сессии если есть синхронизация с сервером.
	data:{},
	set:(),//Сохраняет в переменную data
	get:(),//Считывает из переменной data
	
	copy:(),//Создаётся копия и синхронизируется с новым id, на сервере созданная копия не сохранена, прошлая забывается
	create:(),//Создаётся новая пустая сессия с новым id, прошлая забывается
	load:(id),//Загрузить существующую сессию c новым id, прошлая забывается
	
	
	_agentSave:(),//Вызывается при set. На сервере это будет означать запись в переменную сессии
	_agentLoad:(),//Вызывается при set get. Загрузка из серверной сессии. На сервере ещё нужно идентифицировать каждого агента... наверно
	_time:int, //Время последней синхронизации
	_connect:(),//Когда сессия синхронизирована вызывается каждые x секунд, и вызывается при set. Передаёт и получает обновления. Передаваемые обновления приоритетней получаемых. Если сессия является сохранённой то на сервере также каждые x секунд идёт проверка изменений.
	_ans:{//Прошлый ответ сервера
		msg
	},
}

ses.get('name.name.name');//Получить значение свойства
ses.set('name.name.name','val');//Установить



sesadm=require('sesadm.sjs');
ses=sesadm.get(type,'id');




ГДЕ ХРАНИТЬ ОБРАБАТЫВАЕМЫЕ СЛОИ (объект)

 sync
  disk
   seri - возможна ли сериализация данных (функции удаляются)
 +++ data - данные пользователя - авторизация
 -++ base - как база данных - статистика
 +-+ face - сортировка, интерфейс
 --+ tamp - функции на сервере хранить можно на клиенте нет так как хранится в localStorage
 --- temp - (load exec cache) можно хранить с методами на клиенте в localStorage не добавляется. Либо есть либо не будет.



Без сериализация самый дешёвый и быстро доступный кэш, изменяемые в нём объекты меняются сразу и в кэше

type - имя сессии

- должен быть 1 sync при старте
- не должно быть имени сессия, просто сессия
- недолжно быть конфига в сессии. Сессия пустая.
id нужен чтобы востановить любую сессию

var base=infra.Session.init('base',view);



Проверка что сессия настоящая.


При инициализации сессии, если нет кукиса, создаётся случайный id и записывается в куки.
Если сессия синхронизируется, отправляется запрос за данными.

Верификации что id настоящий нет.

Секрет нужен для session.key

